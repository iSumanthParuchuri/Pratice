class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> res;
        int ind=-1,end=-1,f=0,n=intervals.size(),f2=0,k=0;
        for(int i=0;i<n;i++){
            if(newInterval[0]>intervals[i][1]){
                //res.push_back(intervals[i]);
            }
            else if(f==0 && newInterval[0]<=intervals[i][0] && newInterval[0]<intervals[i][1]){
                f=1;
                f2=1;
                ind=newInterval[0];
            }
            else if(f==0 && newInterval[0]>intervals[i][0] && newInterval[0]<=intervals[i][1]){
                f=1;
                ind=intervals[i][0];
            }
            else if(f==0 && newInterval[0]==intervals[i][0] && newInterval[0]==intervals[i][1]){
                f=1;
                ind=intervals[i][0];
            }
            if(f==1 && newInterval[1]>intervals[i][1]){
                while(i<n){
                    if(newInterval[1]>=intervals[i][1]){
                        i++;
                    }
                    else if(newInterval[1]<intervals[i][0] && newInterval[1]<intervals[i][1]){
                        end=newInterval[1];
                        f=2;
                        f2=2;
                        k=1;
                        break;
                    }
                    else if((newInterval[1]>=intervals[i][0] && newInterval[1]<intervals[i][1]) || (newInterval[1]>intervals[i][0] && newInterval[1]<=intervals[i][1])){
                        f=2;
                        end=intervals[i][1];
                        k=1;
                        break;
                    }
                }
                if(k==0){
                    f=2;
                    i--;
                    end=newInterval[1];
                }
            }
            else if(f==1 && newInterval[1]<intervals[i][0] && newInterval[1]<=intervals[i][1]){
                f=2;
                f2=2;
                end=newInterval[1];
            }
            else if((f==1 && newInterval[1]>=intervals[i][0] && newInterval[1]<intervals[i][1]) || (f==1 && newInterval[1]>intervals[i][0] && newInterval[1]<=intervals[i][1]) || (f==1 && newInterval[1]==intervals[i][0] && newInterval[1]==intervals[i][1])){
                f=2;
                end=intervals[i][1];
            }
            if(f==2 && f2==2){
                res.push_back({ind,end});
                res.push_back(intervals[i]);
                f=3;
            }
            else if(f==2){
                res.push_back({ind,end});
                f=3;
            }
            else{
                res.push_back(intervals[i]);
            }
        }
        if(end==-1 && ind==-1){
            res.push_back(newInterval);
        }
        return res;
    }
};
