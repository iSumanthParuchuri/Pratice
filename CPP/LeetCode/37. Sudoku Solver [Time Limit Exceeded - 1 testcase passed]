class Solution {
public:
    void Rv(vector<vector<char>>& board, int ind, unordered_map<char, int>& umap){
        for(int i=0;i<9;i++){
            if(board[ind][i]!='.'){
                umap[board[ind][i]]=1;
            }
        }
    }
    void Cv(vector<vector<char>>& board, int ind, unordered_map<char, int>& umap){
        for(int i=0;i<9;i++){
            if(board[i][ind]!='.'){
                umap[board[i][ind]]=1;
            }
        }
    }
    void RCv(vector<vector<char>>& board, int row, int col, unordered_map<char, int>& umap){
        for(int i=row;i<row+3;i++){
            for(int j=col;j<col+3;j++){
                if(board[i][j]!='.'){
                    umap[board[i][j]]=1;
                }
            }
        }
    }
    bool v(vector<vector<char>>& board){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        while(!v(board)){
            for(int i=0;i<9;i++){
                for(int j=0;j<9;j++){
                    if(board[i][j]=='.'){
                        unordered_map<char, int> umap;
                        Rv(board,i,umap);
                        Cv(board,j,umap);
                        RCv(board,int(i/3)*3,int(j/3)*3,umap);
                        if(umap.size()==8){
                            for(char k='1';k<='9';k++){
                                if(umap.find(k)==umap.end()){
                                    board[i][j]=k;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
